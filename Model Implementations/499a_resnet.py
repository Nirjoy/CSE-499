# -*- coding: utf-8 -*-
"""499A Resnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GtfdxUS6aQeIJPrTHFdepxgyBo7cBqSF
"""

!pip install -U -q PyDrive

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
# Authenticating and creating the Drive client
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

df = drive.CreateFile({'id': '13LZcIgT0m4SafyGE3nfOlIjF6Hvlfyw7'})
df.GetContentFile('roads.zip')
!unzip roads.zip

import glob

bad_img = glob.glob('roads/bad/*.*')
good_img = glob.glob('roads/good/*.*')

Y = []
for i in bad_img:
  Y.append(0)

for i in good_img:
  Y.append(1)

import numpy as np
Y=np.asarray(Y)

import pandas as pd
Y = pd.get_dummies(Y).to_numpy()
Y.shape

imgg_arr=[]
import tensorflow as tf
for i in bad_img:
    image=tf.keras.preprocessing.image.load_img(i, color_mode='rgb', target_size=None)
    image=np.array(image)
    imgg_arr.append(image)

for i in good_img:
    image=tf.keras.preprocessing.image.load_img(i, color_mode='rgb', target_size=None)
    image=np.array(image)
    imgg_arr.append(image)

#deciding pixel values from image samples
def pixel_decider(arr): 
	f_pixel=int(arr[0].shape[0])
	s_pixel=int(arr[0].shape[1])
	for i in arr:                    # returns minimum pixel values from sample set.
		if f_pixel > (i+1).shape[0]:
			f_pixel=int((i+1).shape[0])
		if s_pixel > (i+1).shape[1]:
			s_pixel=int((i+1).shape[1])
	return f_pixel,s_pixel

first_pixel,second_pixel=pixel_decider(imgg_arr) #calling method
print("first pixel:",first_pixel)
print("second pixel:",second_pixel)

#now resizing image samples
from skimage.transform import resize
ImgArray=[]
for i in imgg_arr:
  resized_img = resize(i,(first_pixel,second_pixel))
  ImgArray.append(resized_img.astype('float32'))

ImgArray=np.asarray(ImgArray)

ImgArray.shape

#cross validation
from sklearn.model_selection import train_test_split,KFold
kf=KFold(10,True,1)
for train_index,test_index in kf.split(ImgArray):
    print("Train Index: ", train_index)
    print("Test Index: ", test_index)
    print("\n")

print(train_index.shape)

import keras
from keras.layers import Dense, Conv2D, BatchNormalization, Activation
from keras.layers import AveragePooling2D, Input, Flatten
from keras.optimizers import Adam
from keras.regularizers import l2
from keras.models import Model

## building the network
def resnet_layer(inputs,num_filters=16,kernel_size=3,strides=1,activation='relu',batch_normalization=True,conv_first=True):
     
    conv = Conv2D(num_filters,kernel_size=kernel_size,strides=strides,padding='same',kernel_initializer='he_normal',kernel_regularizer=l2(1e-4))

    x = inputs
    if conv_first:
        x = conv(x)
        if batch_normalization:
            x = BatchNormalization()(x)
        if activation is not None:
            x = Activation(activation)(x)
    else:
        if batch_normalization:
            x = BatchNormalization()(x)
        if activation is not None:
            x = Activation(activation)(x)
        x = conv(x)
    return x

def resnet_v1(input_shape, depth, num_classes=2):
    
    if (depth - 2) % 6 != 0:
        raise ValueError('depth should be 6n+2 (eg 20, 32, 44 in [a])')
    # Start model definition.
    num_filters = 16
    num_res_blocks = int((depth - 2) / 6)

    inputs = Input(shape=input_shape)
    x = resnet_layer(inputs=inputs)
    # Instantiate the stack of residual units
    for stack in range(3):
        for res_block in range(num_res_blocks):
            strides = 1
            if stack > 0 and res_block == 0:  # first layer but not first stack
                strides = 2  # downsample
            y = resnet_layer(inputs=x,num_filters=num_filters,strides=strides)
            y = resnet_layer(inputs=y,num_filters=num_filters,activation=None)
            if stack > 0 and res_block == 0:  # first layer but not first stack
                # linear projection residual shortcut connection to match
                # changed dims
                x = resnet_layer(inputs=x,num_filters=num_filters,kernel_size=1,strides=strides,activation=None,batch_normalization=False)
            x = keras.layers.add([x, y])
            x = Activation('relu')(x)
        num_filters *= 2

    # Add classifier on top.
    # v1 does not use BN after last shortcut connection-ReLU
    x = AveragePooling2D(pool_size=8)(x)
    y = Flatten()(x)
    outputs = Dense(num_classes,
                    activation='softmax',
                    kernel_initializer='he_normal')(y)

    # Instantiate model.
    model = Model(inputs=inputs, outputs=outputs)
    return model

model = resnet_v1(input_shape=(first_pixel,second_pixel,3), depth=32)

model.summary()

X_train, X_test, y_train, y_test = ImgArray[train_index], ImgArray[test_index], Y[train_index], Y[test_index]

from keras.losses import categorical_crossentropy
from keras.optimizers import Adam

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.fit(X_train,y_train,batch_size=20,epochs=10,verbose=1, validation_data=(X_test,y_test))

scores = model.evaluate(X_test, y_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))

# testing a single photo
photo_test=X_test[2]

from skimage.io import imread, imshow
import matplotlib.pyplot as plt
imshow(photo_test)
print("Actual Image.")

model.predict(X_test[1:2]) # model predicts this image as [1, 0] because probability is high at first position [99.9%,  0.00000956%]

y_test[1:2]   # this is actual true value [1, 0].

